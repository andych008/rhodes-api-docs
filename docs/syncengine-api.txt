## SyncEngine API - Sync the Rhodes Model with the RhoSync Server

Synchronize data for the Rhodes model and handle updates between the Rhodes application and the RhoSync server.


where should I discuss @param, which is where a lot of the data will come from for htese methods?



## SyncEngine.login(login, password, callback)

Authenticates the user with the RhoSync server.

login - The ZZZZZ is this the username?  
ZZZZZ why is it shown like this in the devel guide: @params['login']?
password - The password for the RhoSync server.  
callback - a url_for call to handle the result of the login request with a callback.

## SyncEngine.logout

Logs out the user from the RhoSync server.

## logged_in

True if the user is logged into the RhoSync server, false otherwise.  

## SyncEngine.dosync(show_sync_status)

Start a synchronization with the RhoSync server and show an optional sync status popup.  

show_sync_status - True if you want to show a sync status popup, false otherwise.

## SyncEngine.dosync_source(source_id_or_name, show_sync_status)

Start a synchronization with the RhoSync server for a given source id or source name and show an optional status popup. 

source_id_or_name - Source name or ID.  
ZZZZ the example shows Product.get_source_id.to_i and Product.get_source_name. I do not know where these came from! A class I have to document?  
show_sync_status - True if you want to show a sync status popup, false otherwise.

## SyncEngine.lock_sync_mutex

Blocks the synchronization call to wait for SyncEngine lock (useful for performing batch operations).

## SyncEngine.unlock_sync_mutex

Release the SyncEngine lock started by SyncEngine.lock_sync_mutex.

## SyncEngine.stop_sync

Stops any synchronization operations currently in progress.  

## SyncEngine.set_notification(source_id, callback_url, params)

Set notification callback for a model.

source_id - The source id for the RhoSync server.  
callback_url - url_for call to a callback for notification.

ZZZZ What should I write here about @params and its contents? 

## SyncEngine.clear_notification(source_id)

Clears the synchronization notification for a given source id.  

source_id - The source id for the RhoSync server.

## SyncEngine.on_sync_create_error(source_name, objects, action)

Perform an action upon a synchronization create error.

source_name - The name of the RhoSync server.  
objects - One or more error objects.  
action - :delete to remove the object from client, :recreate to push this object to the server again at the next sync.

## SyncEngine.on_sync_update_error(source_name, objects, action, rollback_objects)

Perform an action upon a sync update error. 

source_name - The name of the RhoSync server.  
objects - One or more error objects.  
action - :retry to push the update object operation to server again at next sync, :rollback to write the rollback_objects to client database.  
rollback_objects - Contains objects attributes before failed update and sends by server. should be specified for :rollback action.  
ZZZZZZ I do NOT know what the above means!!!!!!!!!

## SyncEngine.on_sync_delete_error(src_name, objects, action)

Perform action upon a synchronization delete error.  

source_name - The name of the RhoSync server.  
objects - One or more error objects.  
action - :retry â€“ will push delete object operation to server again at next sync. ZZZZZZZ so either :retry or nil?

## SyncEngine.set_pollinterval(interval)

Updates the SyncEngine poll interval.

interval - number of seconds for the poll interval. 0 disables polling-based synchronization (you may still use push-based-synchronization).

## SyncEngine.set_syncserver(server_url)

Sets the RhoSync server address and stores it in rhoconfig.txt.  

server_url - the path to the RhoSync server.

## SyncEngine.set_objectnotify_url(url)

Set the callback for when the SyncEngine notifies when a specific object on the current page has been modified.  

url - the url for the callback.

## SyncEngine.set_pagesize(size)

Set the synchronization page size for the SyncEngine.

size - Size of the SyncEngine synchronization page. Default is 2000.

## SyncEngine.get_pagesize

Get the current sync page size for the SyncEngine.  

## SyncEngine.enable_status_popup(true_or_false)

Enable or disable the show status popup.

true_or_false - true to enable the show status popup. Default is false, except for Blackberry where default is true.

## SyncEngine.set_ssl_verify_peer(true_or_false)

Enable or disable verification of RhoSync ssl certificates.  

true_or_false - true to enable verification of RhoSync ssl certificates. Default is true.

## SyncEngine.get_user_name

Returns the current username of the SyncEngine session if SyncEngine.logged_in is true; if false, returns the last logged in username.  

## SyncEngine.search(from, search_params, offset, max_results, callback, callback_param, progress_step)

Call search on the RhoSync application.

from - Sets the RhoSync path that records will be fetched with (optional). Default is 'search'.  
search_params - hash containing key/value search items.  
offset - Starting record to be returned.  
max_results - Maximum number of records to be returned.  
callback - Callback to be executed after search is completed.  
callback_param - (optional) Parameters passed to callback.  
progress_step - (optional) Define how often the search callback will be executed with 'in_progress' state.  
sync_changes - (optional)  - true or false(default). Define should client changes send to server before search.

## SyncEngine.search(source_names, from, search_params, offset, max_results, callback, callback_param, progress_step)

Call search on the RhoSync application for multiple sources.

source_names - list of source names for when you wish to search the RhoSync server in multiple sources.  
from - Sets the RhoSync path that records will be fetched with (optional). Default is 'search'.  
search_params - hash containing key/value search items.  
offset - Starting record to be returned.  
max_results - Maximum number of records to be returned.  
callback - Callback to be executed after search is completed.  
callback_param - (optional) Parameters passed to callback.  
progress_step - (optional) Define how often the search callback will be executed with 'in_progress' state.  
sync_changes - (optional)  - true or false(default). Define should client changes send to server before search.