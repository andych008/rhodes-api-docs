# Rhom API - Perform Database Operation on Rho Model Objects

Allows access to the Rhodes mini database object mapper, performing database operation on Rho model objects.

## Rhom.clear_notification

Clear notification for the object.

## Rhom.delete_all(conditions)

Delete all Rho model objects for a source, filtering by conditions.

conditions - filtering conditions, such as :conditions => {'industry'=>'electronics'}.

## Rhom.destroy

Destroy a Rho model object.

## Rhom.find(arguments)

Find Rho model objects. The arguments you can use are:

:all - returns all objects w/ optional conditions  
:first - returns first object matching conditions  
:count - returns number of objects matching conditions  
:conditions - (optional) hash of attribute/values to match supports sql fragment(i.e. "name like 'rhomobile') or sql fragment with binding (you have to define :select with sql queries) (i.e. ["name like ?", "'#{company#}'"]) Note: use single comma around string values  
:order - (optional) attribute(s) to order the list  
:orderdir - (optional) order direction('ASC' (default), 'DESC' )  
:select - (optional) array of string attributes to return with the object.  This is useful if your model has a lot of attributes but your query only needs a few of them.  
:per_page - (optional) maximum number of items return  
:offset - (optional) offset from beginning of the list

## Rhom.find_all

Alias for find(:all,*args).

## Rhom.find_by_sql(sql_query)

Returns rhom object(s) based on sql_query. This method works only for schema models.

sql_query - An sql query, such as `"SELECT * FROM Account"`.

## Rhom.new(attributes)

Create a new Rho model object.

attributes - Attributes assigned to the new model object, such as `{"name" => "ABC Inc.","address" => "555 5th St."}`.

## Rhom.create(attributes)

Create a new Rho model object and save it to the database.

attributes - Attributes assigned to the new model object, such as `{"name" => "ABC Inc.","address" => "555 5th St."}`.

## Rhom.paginate(arguments)

Call `find` with a limit on the number of records.  The arguments you can use are:

:page - which page to return, used as offset in combination with :per_page  
:per_page - with :page (used as offset), the number of records to return, such as `:page => 1, :per_page => 20`  
:conditions - same as find with :conditions  
:order - same as find with :order  
:select - same as find with :select  

## Rhom.sync(callback, callback_data, show_status_popup)

Start the sync process for a Rho model.

callback_url - the url for your sync callback method. If this argument is used, SyncEngine.set_notification is called before SyncEngine.dosync.  
(ZZZZZZZZ well, try to get the callback argument name consistent, but do not let that slow you down!)  
callback_data - Data for the callback method.  
show_status_popup - true if you want to show a popup window upon sync, false otherwise.

ZZZZZZZZ Shouldn't I change all RhoSync to RhoConnect? Or do that in October?  
ZZZZZZZZ Ask Lars about having a folder in there, I think I will want that.  
ZZZZZZZ instructions to clone from git. I think point to git to set up, then give clone instruction?

## Rhom.set_notification(notification_url, params)

Set a notification to be called when the sync is complete for this model.

notification_url - the url for your notification callback method.
params - paramters for the callback method.
ZZZZZZZ this has also been called data? I want consistency!

## Rhom.update_attributes(attributes)

Updates the current Rho model object attributes and saves it to the database. This is the fastest way to add or update model attributes.

attributes - The name and value pairs for the model attributes, such as `{"name" => "ABC Inc.", "industry" => "Technology"}`.

## Rhom.save

Saves the current Rhodes model object to the database.

## Rhom.can_modify

Returns ture if the Rhodes model object is not currently being synced (if it is being synced, you should disable editing of the object).  
ZZZZ make sure you are consistent with this term!

## Rhom.changed?

Returns true if a Rhodes model object has local database changes that need to be synchronized, false otherwise.
