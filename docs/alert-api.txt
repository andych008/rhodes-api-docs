# Alert API

Call system alert methods for popup, vibrate, or playing audio files.

## hide_popup

Closes the current popup window.

## play_file

Play an audio file if that media type is supported by the device. The file must located in the application; for example, `/apps/public/test-file.mp3`.

	:::ruby
	play_file(filename.ext, media_type)

 * `file_name.ext` - The path to the file, ending in the file name and extension.  
 * **media_type** - Media type can be specified explicitly, or can be recognized from the file extension. The known file extensions are .mp3 – audio/mpeg and .wav – audio/x-wav.

## show_popup

Bring the application up front and show a message in a popup window.

	:::ruby
	show_popup(popup_message)

<table border="1">
<tr>
	<td><code>popup_message</code></td>
	<td>a text string or a hash of the following form:
	<table border="1">
		<tr>
			<td><code>:message</code></td>
			<td>text displayed in the popup window</td>
		</tr>
		<tr>
			<td><code>:title</code></td>
			<td>title of the popup window</td>
		</tr>
		<tr>
			<td><code>:icon</code></td>
			<td>path to an image, or :alert for ! icon, :question for ? icon, :info for information icon.</td>
		</tr>
		<tr>
			<td><code>:buttons</code></td>
			<td>array of buttons defined by id and title. Specify either by hash with :id and :title keys, or by string.</td>
		</tr>
		<tr>
			<td><code>:callback</code></td>
			<td>url called on button click. Its @params hash is :button_id, :button_title, and :button_index.</td>
		</tr>
	</table>
	</td>
</tr>
</table>

## show_status

Display a window containing a status message. The window closes after the user clicks on its hide button.

	:::ruby
	show_status(title, status_text, hide_button_label)

<table border="1">
<tr>
	<td><code>title</code></td>
	<td>The title on the status message popup window.</td>
</tr>
<tr>
	<td><code>status_text</code></td>
	<td>The status message displayed in the popup status window.</td>
</tr>
<tr>
	<td><b>hide_button_label</b></td>
	<td>The label text for the hide button in the popup status window.</td>
</tr>
</table>

## vibrate

Vibrate the device for a specified time.

	:::ruby
	vibrate(duration)

<table border="1">
<tr>
	<td><code>duration</code></td>
	<td>Vibrate the device for this number of milliseconds, up to 25500; if 0 or not specified, vibrate for 2500 milliseconds.</td>
</tr>
</table>


