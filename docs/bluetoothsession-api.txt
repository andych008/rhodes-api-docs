# BluetoothSession API

Makes a connection between your Bluetooth-equipped device and another Bluetooth-equipped device. [Click for a short example of using bluetooth](http://edgedocs.rhomobile.com/rhodes/device-caps#bluetooth-ex), or here for [Rhodes-System-Api-Samples – BluetoothChat](https://github.com/rhomobile/rhodes-system-api-samples/tree/master/app/BluetoothChat/).

## set_callback

Set the Bluetooth session callback. Returns OK or ERROR.

	:::ruby
	set_callback(connected_device_name, session_callback_url)

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device.</td>
</tr>
<tr>
	<td><code>session_callback_url</code></td>
	<td>url to a callback method. Parameters received in the callback: connected_device_name - name of connected device; event_type - SESSION_INPUT_DATA_RECEIVED or ERROR or SESSION_DISCONNECT
	</td>
</tr>
</table>

## disconnect

Disconnect from the device. Returns OK or ERROR.

	:::ruby
	disconnect(connected_device_name)

<table border="1">
<tr>
	<table border="1">
<tr>
	<td><code>role</code></td>
	<td>ROLE_SERVER or ROLE_CLIENT</td>
</tr>
<tr>
	<td><code>callback_url</code></td>
	<td>url to a callback method called after the Bluetooth session is created or canceled. Parameters received in the callback: status of OK / ERROR / CANCEL, and connected_device_name (the name of the device connected via Bluetooth.
	</td>
</tr>
</table><td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device that is to be disconnected.</td>
</tr>
</table>

## get_status(connected_device_name)

Get the session status. Returns the size of the data received by the bluetooth connection (data has not been read or parsed yet); or -1 if error; or 0 if empty (did not receive data).

	:::ruby
	get_status(connected_device_name)

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device.</td>
</tr>
</table>

## read

Read data from the connected device. Returns an array of bytes.

	:::ruby
	read(connected_device_name)

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device that is read from.</td>
</tr>
</table>

## write

Write data to the connected device.

	:::ruby
	write(connected_device_name, data)

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device that is written to.</td>
</tr>
<tr>
	<td><code>data</code></td>
	<td>The information to write to the connected device. Array of bytes or fixnum.</td>
</tr>
</table>

## read_string

Read string from the connected device. Returns a string.

	:::ruby
	read_string(connected_device_name)

connected_device_name – name of the connected device.

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device that is read from.</td>
</tr>
</table>

## write_string

Write string to the connected device. Returns OK or ERROR.

	:::ruby
	write_string(connected_device_name, data)

<table border="1">
<tr>
	<td><code>connected_device_name</code></td>
	<td>String. The name of the connected Bluetooth device that is written to.</td>
</tr>
<tr>
	<td><code>data</code></td>
	<td>The information to write to the connected device. String.</td>
</tr>
</table>